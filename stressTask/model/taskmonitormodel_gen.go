// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskMonitorFieldNames          = builder.RawFieldNames(&TaskMonitor{})
	taskMonitorRows                = strings.Join(taskMonitorFieldNames, ",")
	taskMonitorRowsExpectAutoSet   = strings.Join(stringx.Remove(taskMonitorFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	taskMonitorRowsWithPlaceHolder = strings.Join(stringx.Remove(taskMonitorFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheHhxTaskMonitorIdPrefix = "cache:hhx:taskMonitor:id:"
)

type (
	taskMonitorModel interface {
		Insert(ctx context.Context, data *TaskMonitor) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TaskMonitor, error)
		Update(ctx context.Context, data *TaskMonitor) error
		Delete(ctx context.Context, id int64) error
		FindAllByTaskId(ctx context.Context, taskId int64) ([]*TaskMonitor, error)
		DeleteByTaskId(ctx context.Context, taskId int64) error
	}

	defaultTaskMonitorModel struct {
		sqlc.CachedConn
		table string
	}

	TaskMonitor struct {
		Id      int64  `db:"id"`      // id
		Name    string `db:"name"`    // 监控名称
		Url     string `db:"url"`     // 发压机所使用url
		Account string `db:"account"` // 账号
		Pwd     string `db:"pwd"`     // 密码
		Type    int64  `db:"type"`    // 类型[1 locust监控 2被测服务器监控 3发芽服务器监控 4 自定义监控]
		TaskId  int64  `db:"task_id"` // 任务id
	}
)

func newTaskMonitorModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTaskMonitorModel {
	return &defaultTaskMonitorModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`task_monitor`",
	}
}

func (m *defaultTaskMonitorModel) Delete(ctx context.Context, id int64) error {
	hhxTaskMonitorIdKey := fmt.Sprintf("%s%v", cacheHhxTaskMonitorIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hhxTaskMonitorIdKey)
	return err
}

func (m *defaultTaskMonitorModel) DeleteByTaskId(ctx context.Context, taskId int64) error {
	hhxTaskMonitorIdKey := fmt.Sprintf("%sdaleteByTaskId%v", cacheHhxTaskMonitorIdPrefix, taskId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `task_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, taskId)
	}, hhxTaskMonitorIdKey)
	return err
}

func (m *defaultTaskMonitorModel) FindOne(ctx context.Context, id int64) (*TaskMonitor, error) {
	hhxTaskMonitorIdKey := fmt.Sprintf("%s%v", cacheHhxTaskMonitorIdPrefix, id)
	var resp TaskMonitor
	err := m.QueryRowCtx(ctx, &resp, hhxTaskMonitorIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskMonitorRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskMonitorModel) FindAllByTaskId(ctx context.Context, taskId int64) ([]*TaskMonitor, error) {
	var resp []*TaskMonitor
	query := fmt.Sprintf("select %s from %s where `task_id` = ? ", taskMonitorRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, taskId)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskMonitorModel) Insert(ctx context.Context, data *TaskMonitor) (sql.Result, error) {
	hhxTaskMonitorIdKey := fmt.Sprintf("%s%v", cacheHhxTaskMonitorIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, taskMonitorRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Url, data.Account, data.Pwd, data.Type, data.TaskId)
	}, hhxTaskMonitorIdKey)
	return ret, err
}

func (m *defaultTaskMonitorModel) Update(ctx context.Context, data *TaskMonitor) error {
	hhxTaskMonitorIdKey := fmt.Sprintf("%s%v", cacheHhxTaskMonitorIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskMonitorRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Url, data.Account, data.Pwd, data.Type, data.TaskId, data.Id)
	}, hhxTaskMonitorIdKey)
	return err
}

func (m *defaultTaskMonitorModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheHhxTaskMonitorIdPrefix, primary)
}

func (m *defaultTaskMonitorModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskMonitorRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTaskMonitorModel) tableName() string {
	return m.table
}
