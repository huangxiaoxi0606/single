// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pressureFieldNames          = builder.RawFieldNames(&Pressure{})
	pressureRows                = strings.Join(pressureFieldNames, ",")
	pressureRowsExpectAutoSet   = strings.Join(stringx.Remove(pressureFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	pressureRowsWithPlaceHolder = strings.Join(stringx.Remove(pressureFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheHhxPressureIdPrefix = "cache:hhx:pressure:id:"
)

type (
	pressureModel interface {
		Insert(ctx context.Context, data *Pressure) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Pressure, error)
		Update(ctx context.Context, data *Pressure) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPressureModel struct {
		sqlc.CachedConn
		table string
	}

	Pressure struct {
		Id           int64          `db:"id"`
		TaskId       int64          `db:"task_id"`      // task表对应id
		RequestType  int64          `db:"request_type"` // 请求类型
		HostConfig   string         `db:"host_config"`  // host配置
		RequestUrl   string         `db:"request_url"`  // 请求地址
		BodyType     int64          `db:"body_type"`    // body类型
		PressureType int64          `db:"pressure_type"`
		SuccessRate  int64          `db:"success_rate"` // 成功率
		RespTime     int64          `db:"resp_time"`    // 响应时间
		RespRule     sql.NullString `db:"resp_rule"`    // 响应规则
	}
)

func newPressureModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPressureModel {
	return &defaultPressureModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`pressure`",
	}
}

func (m *defaultPressureModel) Delete(ctx context.Context, id int64) error {
	hhxPressureIdKey := fmt.Sprintf("%s%v", cacheHhxPressureIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hhxPressureIdKey)
	return err
}

func (m *defaultPressureModel) FindOne(ctx context.Context, id int64) (*Pressure, error) {
	hhxPressureIdKey := fmt.Sprintf("%s%v", cacheHhxPressureIdPrefix, id)
	var resp Pressure
	err := m.QueryRowCtx(ctx, &resp, hhxPressureIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pressureRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPressureModel) Insert(ctx context.Context, data *Pressure) (sql.Result, error) {
	hhxPressureIdKey := fmt.Sprintf("%s%v", cacheHhxPressureIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pressureRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TaskId, data.RequestType, data.HostConfig, data.RequestUrl, data.BodyType, data.PressureType, data.SuccessRate, data.RespTime, data.RespRule)
	}, hhxPressureIdKey)
	return ret, err
}

func (m *defaultPressureModel) Update(ctx context.Context, data *Pressure) error {
	hhxPressureIdKey := fmt.Sprintf("%s%v", cacheHhxPressureIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pressureRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TaskId, data.RequestType, data.HostConfig, data.RequestUrl, data.BodyType, data.PressureType, data.SuccessRate, data.RespTime, data.RespRule, data.Id)
	}, hhxPressureIdKey)
	return err
}

func (m *defaultPressureModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheHhxPressureIdPrefix, primary)
}

func (m *defaultPressureModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pressureRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPressureModel) tableName() string {
	return m.table
}
